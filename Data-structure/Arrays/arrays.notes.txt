In Python, arrays can be created using the built-in array module, which provides a way to create space-efficient arrays of basic data types (like integers and floats). However, the more commonly used data structure in Python for similar functionality is the list. Below are examples of both arrays and lists, showcasing their basic operations.

Using the array Module
Here's how you can work with arrays using the array module:

import array

# Create an array of integers
arr = array.array('i', [1, 2, 3, 4, 5])

# Print the array
print("Initial array:", arr)

# Append an element
arr.append(6)
print("After appending 6:", arr)

# Insert an element at index 2
arr.insert(2, 10)
print("After inserting 10 at index 2:", arr)

# Remove an element (value 4)
arr.remove(4)
print("After removing 4:", arr)

# Accessing elements by index
print("Element at index 0:", arr[0])
print("Element at index 3:", arr[3])

# Slicing the array
sliced_arr = arr[1:4]
print("Sliced array (from index 1 to 3):", sliced_arr)

# Iterate through the array
print("Iterating through the array:")
for num in arr:
    print(num, end=' ')



Output :

Initial array: array('i', [1, 2, 3, 4, 5])
After appending 6: array('i', [1, 2, 3, 4, 5, 6])
After inserting 10 at index 2: array('i', [1, 2, 10, 3, 4, 5, 6])
After removing 4: array('i', [1, 2, 10, 3, 5, 6])
Element at index 0: 1
Element at index 3: 3
Sliced array (from index 1 to 3): array('i', [2, 10, 3])
Iterating through the array:
1 2 10 3 5 6 


Using Lists
Python lists are more flexible and are often used instead of arrays for most purposes. Here's an example using lists:

Example: Basic Operations with Lists

# Create a list
my_list = [1, 2, 3, 4, 5]

# Print the list
print("Initial list:", my_list)

# Append an element
my_list.append(6)
print("After appending 6:", my_list)

# Insert an element at index 2
my_list.insert(2, 10)
print("After inserting 10 at index 2:", my_list)

# Remove an element (value 4)
my_list.remove(4)
print("After removing 4:", my_list)

# Accessing elements by index
print("Element at index 0:", my_list[0])
print("Element at index 3:", my_list[3])

# Slicing the list
sliced_list = my_list[1:4]
print("Sliced list (from index 1 to 3):", sliced_list)

# Iterate through the list
print("Iterating through the list:")
for num in my_list:
    print(num, end=' ')


Output : 

Initial list: [1, 2, 3, 4, 5]
After appending 6: [1, 2, 3, 4, 5, 6]
After inserting 10 at index 2: [1, 2, 10, 3, 4, 5, 6]
After removing 4: [1, 2, 10, 3, 5, 6]
Element at index 0: 1
Element at index 3: 3
Sliced list (from index 1 to 3): [2, 10, 3]
Iterating through the list:
1 2 10 3 5 6 


Summary
The array module is used for creating arrays of a specific type, and it is useful when memory efficiency is a concern.
Lists are more flexible and commonly used in Python for a wide range of applications. They can hold items of mixed types and provide many built-in methods for manipulation.